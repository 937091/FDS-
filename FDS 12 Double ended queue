A double-ended queue (deque) is a linear list in which additions and deletions may be made 
at either end. Obtain a data representation mapping a deque into a one-dimensional array. 
Write C++ program to simulate deque with functions to add and delete elements from either 
end of the deque. 

#include<iostream>
using namespace std;
#define m 100
int f=-1,r=-1,n;
int q[m];
int isempty()
{
	if(f==-1 && r==-1)
	{return 1;
	}
	else
	{return 0;
	}
}
int isfull()
{
	if(f==0 && r==m-1)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}
void enqueue_r()
{
	if(isfull())
	{
		cout<<"\n job is full";
	}
	else
	{   if(r==m-1)
	     {
	     	cout<<"\n try insertion from front end";
		 }
	
	
	   else{
	      if(f==-1)
	      {
	      	f=0;
	      	
		  }
		  
	     int i,e;
	
			r++;
			cout<<"\n Enter job";
			cin>>e;
			q[r]=e;
		
	}
	}
}

void dequeue_f()
{
	if(isempty())
	{
		cout<<"\n job is empty";
	}
	else
	{    cout<<"\n delete job in queue="<<q[f];
	      f++;
		
		  
} }
void enqueue_f()
{
	if(isfull())
	{
		cout<<"\n q is full";
	}
	else
	{   int e;
		if(f>r)
		{
		   f--;
		   q[f]=e;	   	
		}
		else
		{
		  if (f==0)
		  {
		  	cout<<"\n try insertion from other end";
			  }
		  else
		  {
		  	f=0;
		  	cout<<"\n enter job";
		  	cin>>e;
		  	q[f]=e;
		 }	
		}
	}
}
void dequeue_r()
{
	if(isempty())
	{
		cout<<"\n q is empty";
	}
	else
	{
		cout<<q[r]<<"\n deleted";
		if(f==r){
			f=-1;
			r=-1;
		}
		else
		{
			--r;
		}
	}
};
void display()
{
	if(isempty())
	{
	 	cout<<"\n job is empty"; 	
	}
	else
	{ int i;
		for(i=f;i<=r;i++)
		{    
			cout<<"\n job in queue=";
			cout<<q[i];
		}
	}
}

int main()
{
  int ch;
 	char s;
 	do{
 		cout<<"\n 1.enqueue_r \n 2.dequeue_f \n 3.display \n 4.dequeue_r \n 5.enqueue_f";
 		cout<<"\n enter your choice";
 		cin>>ch;
 	switch(ch)	{
 		         
 		         case 1: enqueue_r();
 		                 break;
 		         case 2: dequeue_f();
 		               break;
 		        case 3:display();
 		          break;
 		        case 4: dequeue_r();
 		           break;
 		        case 5: enqueue_f();
 		           break;
 		        default:cout<<"\n invalid choice";
 		        
		 }cout<<"\n do you want to continue y/n	";
		 cin>>s; 
		 }while(s=='y');
 return 0;



}
